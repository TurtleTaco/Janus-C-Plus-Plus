// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "drift.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool drift::ap_const_boolean_1 = true;
const sc_logic drift::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic drift::ap_const_logic_0 = sc_dt::Log_0;

drift::drift(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return_0);
    sensitive << ( p_int_0_x_V_read );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( p_int_1_x_V_read );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( p_int_1_y_V_read );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( p_int_2_y_V_read );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( p_int_3_y_V_read );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( p_int_4_y_V_read );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( p_int_5_y_V_read );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( p_int_6_y_V_read );

    SC_METHOD(thread_ap_return_16);
    sensitive << ( p_int_7_y_V_read );

    SC_METHOD(thread_ap_return_17);
    sensitive << ( p_int_8_y_V_read );

    SC_METHOD(thread_ap_return_18);
    sensitive << ( p_int_0_z_V_read );

    SC_METHOD(thread_ap_return_19);
    sensitive << ( p_int_1_z_V_read );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( p_int_2_x_V_read );

    SC_METHOD(thread_ap_return_20);
    sensitive << ( p_int_2_z_V_read );

    SC_METHOD(thread_ap_return_21);
    sensitive << ( p_int_3_z_V_read );

    SC_METHOD(thread_ap_return_22);
    sensitive << ( p_int_4_z_V_read );

    SC_METHOD(thread_ap_return_23);
    sensitive << ( p_int_5_z_V_read );

    SC_METHOD(thread_ap_return_24);
    sensitive << ( p_int_6_z_V_read );

    SC_METHOD(thread_ap_return_25);
    sensitive << ( p_int_7_z_V_read );

    SC_METHOD(thread_ap_return_26);
    sensitive << ( p_int_8_z_V_read );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( p_int_3_x_V_read );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( p_int_4_x_V_read );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( p_int_5_x_V_read );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( p_int_6_x_V_read );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( p_int_7_x_V_read );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( p_int_8_x_V_read );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( p_int_0_y_V_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "drift_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, p_int_0_x_V_read, "(port)p_int_0_x_V_read");
    sc_trace(mVcdFile, p_int_1_x_V_read, "(port)p_int_1_x_V_read");
    sc_trace(mVcdFile, p_int_2_x_V_read, "(port)p_int_2_x_V_read");
    sc_trace(mVcdFile, p_int_3_x_V_read, "(port)p_int_3_x_V_read");
    sc_trace(mVcdFile, p_int_4_x_V_read, "(port)p_int_4_x_V_read");
    sc_trace(mVcdFile, p_int_5_x_V_read, "(port)p_int_5_x_V_read");
    sc_trace(mVcdFile, p_int_6_x_V_read, "(port)p_int_6_x_V_read");
    sc_trace(mVcdFile, p_int_7_x_V_read, "(port)p_int_7_x_V_read");
    sc_trace(mVcdFile, p_int_8_x_V_read, "(port)p_int_8_x_V_read");
    sc_trace(mVcdFile, p_int_0_y_V_read, "(port)p_int_0_y_V_read");
    sc_trace(mVcdFile, p_int_1_y_V_read, "(port)p_int_1_y_V_read");
    sc_trace(mVcdFile, p_int_2_y_V_read, "(port)p_int_2_y_V_read");
    sc_trace(mVcdFile, p_int_3_y_V_read, "(port)p_int_3_y_V_read");
    sc_trace(mVcdFile, p_int_4_y_V_read, "(port)p_int_4_y_V_read");
    sc_trace(mVcdFile, p_int_5_y_V_read, "(port)p_int_5_y_V_read");
    sc_trace(mVcdFile, p_int_6_y_V_read, "(port)p_int_6_y_V_read");
    sc_trace(mVcdFile, p_int_7_y_V_read, "(port)p_int_7_y_V_read");
    sc_trace(mVcdFile, p_int_8_y_V_read, "(port)p_int_8_y_V_read");
    sc_trace(mVcdFile, p_int_0_z_V_read, "(port)p_int_0_z_V_read");
    sc_trace(mVcdFile, p_int_1_z_V_read, "(port)p_int_1_z_V_read");
    sc_trace(mVcdFile, p_int_2_z_V_read, "(port)p_int_2_z_V_read");
    sc_trace(mVcdFile, p_int_3_z_V_read, "(port)p_int_3_z_V_read");
    sc_trace(mVcdFile, p_int_4_z_V_read, "(port)p_int_4_z_V_read");
    sc_trace(mVcdFile, p_int_5_z_V_read, "(port)p_int_5_z_V_read");
    sc_trace(mVcdFile, p_int_6_z_V_read, "(port)p_int_6_z_V_read");
    sc_trace(mVcdFile, p_int_7_z_V_read, "(port)p_int_7_z_V_read");
    sc_trace(mVcdFile, p_int_8_z_V_read, "(port)p_int_8_z_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
    sc_trace(mVcdFile, ap_return_16, "(port)ap_return_16");
    sc_trace(mVcdFile, ap_return_17, "(port)ap_return_17");
    sc_trace(mVcdFile, ap_return_18, "(port)ap_return_18");
    sc_trace(mVcdFile, ap_return_19, "(port)ap_return_19");
    sc_trace(mVcdFile, ap_return_20, "(port)ap_return_20");
    sc_trace(mVcdFile, ap_return_21, "(port)ap_return_21");
    sc_trace(mVcdFile, ap_return_22, "(port)ap_return_22");
    sc_trace(mVcdFile, ap_return_23, "(port)ap_return_23");
    sc_trace(mVcdFile, ap_return_24, "(port)ap_return_24");
    sc_trace(mVcdFile, ap_return_25, "(port)ap_return_25");
    sc_trace(mVcdFile, ap_return_26, "(port)ap_return_26");
#endif

    }
}

drift::~drift() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void drift::thread_ap_return_0() {
    ap_return_0 = p_int_0_x_V_read.read();
}

void drift::thread_ap_return_1() {
    ap_return_1 = p_int_1_x_V_read.read();
}

void drift::thread_ap_return_10() {
    ap_return_10 = p_int_1_y_V_read.read();
}

void drift::thread_ap_return_11() {
    ap_return_11 = p_int_2_y_V_read.read();
}

void drift::thread_ap_return_12() {
    ap_return_12 = p_int_3_y_V_read.read();
}

void drift::thread_ap_return_13() {
    ap_return_13 = p_int_4_y_V_read.read();
}

void drift::thread_ap_return_14() {
    ap_return_14 = p_int_5_y_V_read.read();
}

void drift::thread_ap_return_15() {
    ap_return_15 = p_int_6_y_V_read.read();
}

void drift::thread_ap_return_16() {
    ap_return_16 = p_int_7_y_V_read.read();
}

void drift::thread_ap_return_17() {
    ap_return_17 = p_int_8_y_V_read.read();
}

void drift::thread_ap_return_18() {
    ap_return_18 = p_int_0_z_V_read.read();
}

void drift::thread_ap_return_19() {
    ap_return_19 = p_int_1_z_V_read.read();
}

void drift::thread_ap_return_2() {
    ap_return_2 = p_int_2_x_V_read.read();
}

void drift::thread_ap_return_20() {
    ap_return_20 = p_int_2_z_V_read.read();
}

void drift::thread_ap_return_21() {
    ap_return_21 = p_int_3_z_V_read.read();
}

void drift::thread_ap_return_22() {
    ap_return_22 = p_int_4_z_V_read.read();
}

void drift::thread_ap_return_23() {
    ap_return_23 = p_int_5_z_V_read.read();
}

void drift::thread_ap_return_24() {
    ap_return_24 = p_int_6_z_V_read.read();
}

void drift::thread_ap_return_25() {
    ap_return_25 = p_int_7_z_V_read.read();
}

void drift::thread_ap_return_26() {
    ap_return_26 = p_int_8_z_V_read.read();
}

void drift::thread_ap_return_3() {
    ap_return_3 = p_int_3_x_V_read.read();
}

void drift::thread_ap_return_4() {
    ap_return_4 = p_int_4_x_V_read.read();
}

void drift::thread_ap_return_5() {
    ap_return_5 = p_int_5_x_V_read.read();
}

void drift::thread_ap_return_6() {
    ap_return_6 = p_int_6_x_V_read.read();
}

void drift::thread_ap_return_7() {
    ap_return_7 = p_int_7_x_V_read.read();
}

void drift::thread_ap_return_8() {
    ap_return_8 = p_int_8_x_V_read.read();
}

void drift::thread_ap_return_9() {
    ap_return_9 = p_int_0_y_V_read.read();
}

}

