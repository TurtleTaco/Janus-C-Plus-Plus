// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _drift_HH_
#define _drift_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct drift : public sc_module {
    // Port declarations 54
    sc_in< sc_lv<27> > p_int_0_x_V_read;
    sc_in< sc_lv<27> > p_int_1_x_V_read;
    sc_in< sc_lv<27> > p_int_2_x_V_read;
    sc_in< sc_lv<27> > p_int_3_x_V_read;
    sc_in< sc_lv<27> > p_int_4_x_V_read;
    sc_in< sc_lv<27> > p_int_5_x_V_read;
    sc_in< sc_lv<27> > p_int_6_x_V_read;
    sc_in< sc_lv<27> > p_int_7_x_V_read;
    sc_in< sc_lv<27> > p_int_8_x_V_read;
    sc_in< sc_lv<27> > p_int_0_y_V_read;
    sc_in< sc_lv<27> > p_int_1_y_V_read;
    sc_in< sc_lv<27> > p_int_2_y_V_read;
    sc_in< sc_lv<27> > p_int_3_y_V_read;
    sc_in< sc_lv<27> > p_int_4_y_V_read;
    sc_in< sc_lv<27> > p_int_5_y_V_read;
    sc_in< sc_lv<27> > p_int_6_y_V_read;
    sc_in< sc_lv<27> > p_int_7_y_V_read;
    sc_in< sc_lv<27> > p_int_8_y_V_read;
    sc_in< sc_lv<27> > p_int_0_z_V_read;
    sc_in< sc_lv<27> > p_int_1_z_V_read;
    sc_in< sc_lv<27> > p_int_2_z_V_read;
    sc_in< sc_lv<27> > p_int_3_z_V_read;
    sc_in< sc_lv<27> > p_int_4_z_V_read;
    sc_in< sc_lv<27> > p_int_5_z_V_read;
    sc_in< sc_lv<27> > p_int_6_z_V_read;
    sc_in< sc_lv<27> > p_int_7_z_V_read;
    sc_in< sc_lv<27> > p_int_8_z_V_read;
    sc_out< sc_lv<27> > ap_return_0;
    sc_out< sc_lv<27> > ap_return_1;
    sc_out< sc_lv<27> > ap_return_2;
    sc_out< sc_lv<27> > ap_return_3;
    sc_out< sc_lv<27> > ap_return_4;
    sc_out< sc_lv<27> > ap_return_5;
    sc_out< sc_lv<27> > ap_return_6;
    sc_out< sc_lv<27> > ap_return_7;
    sc_out< sc_lv<27> > ap_return_8;
    sc_out< sc_lv<27> > ap_return_9;
    sc_out< sc_lv<27> > ap_return_10;
    sc_out< sc_lv<27> > ap_return_11;
    sc_out< sc_lv<27> > ap_return_12;
    sc_out< sc_lv<27> > ap_return_13;
    sc_out< sc_lv<27> > ap_return_14;
    sc_out< sc_lv<27> > ap_return_15;
    sc_out< sc_lv<27> > ap_return_16;
    sc_out< sc_lv<27> > ap_return_17;
    sc_out< sc_lv<27> > ap_return_18;
    sc_out< sc_lv<27> > ap_return_19;
    sc_out< sc_lv<27> > ap_return_20;
    sc_out< sc_lv<27> > ap_return_21;
    sc_out< sc_lv<27> > ap_return_22;
    sc_out< sc_lv<27> > ap_return_23;
    sc_out< sc_lv<27> > ap_return_24;
    sc_out< sc_lv<27> > ap_return_25;
    sc_out< sc_lv<27> > ap_return_26;


    // Module declarations
    drift(sc_module_name name);
    SC_HAS_PROCESS(drift);

    ~drift();

    sc_trace_file* mVcdFile;

    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_16();
    void thread_ap_return_17();
    void thread_ap_return_18();
    void thread_ap_return_19();
    void thread_ap_return_2();
    void thread_ap_return_20();
    void thread_ap_return_21();
    void thread_ap_return_22();
    void thread_ap_return_23();
    void thread_ap_return_24();
    void thread_ap_return_25();
    void thread_ap_return_26();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
};

}

using namespace ap_rtl;

#endif
